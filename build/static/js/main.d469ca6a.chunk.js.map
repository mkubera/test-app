{"version":3,"sources":["logo.svg","Doggies.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Doggies","doggiesOpts","order","headerTitle","doggies","sort","map","d","String","reverse","className","App","props","state","changeDoggiesOrder","setState","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kC,qICqD5BC,G,iBAlDC,SAAC,GAAsD,IAAD,IAAnDC,YAAeC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,QACpD,OAAQF,GACN,IAAK,MACHE,EACE,4BACGA,EAAQC,OAAOC,KAAI,SAACC,GAAD,OAClB,4BAAKC,OAAOD,QAIlB,MAEF,IAAK,OACHH,EACE,4BACGA,EACEC,OACAI,UACAH,KAAI,SAACC,GAAD,OACH,4BAAKA,OAIb,MAEF,KAAK,KACHH,EACE,4BACGA,EAAQE,KAAI,SAACC,GAAD,OACX,4BAAKA,OAUf,OACE,oCACE,oCACA,yBAAKG,UAAU,WACb,4BAAKP,GACJC,MC0CMO,E,kDAhFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXZ,YAAa,CACXC,MAAO,MACPC,YAAa,iBACbC,QAAS,CAAC,SAAU,QAAS,SAAU,SAAU,QAAS,eA2B9D,EAAKU,mBAAqB,WACxB,IAAIb,EAAW,eAAQ,EAAKY,MAAMZ,aAElC,OAAQ,EAAKY,MAAMZ,YAAYC,OAC7B,IAAK,MACHD,EAAYC,MAAQ,OACpB,MAEF,IAAK,OACHD,EAAYC,MAAQ,KACpB,MAEF,KAAK,KACHD,EAAYC,MAAQ,MAOxB,EAAKa,SAAS,CAAEd,iBAtDD,E,qDA2DjB,OACE,yBAAKS,UAAU,OACb,kBAAC,EAAD,CAAST,YAAae,KAAKH,MAAMZ,cACjC,4BAAQgB,QAASD,KAAKF,oBAAtB,6B,GA/DUI,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d469ca6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n//import './Doggies.css'\r\n\r\nconst Doggies = ({ doggiesOpts: { order, headerTitle, doggies } }) => {\r\n  switch (order) {\r\n    case 'asc':\r\n      doggies = (\r\n        <ol>\r\n          {doggies.sort().map((d) => (\r\n            <li>{String(d)}</li>\r\n          ))}\r\n        </ol>\r\n      )\r\n      break\r\n\r\n    case 'desc':\r\n      doggies = (\r\n        <ol>\r\n          {doggies\r\n            .sort()\r\n            .reverse()\r\n            .map((d) => (\r\n              <li>{d}</li>\r\n            ))}\r\n        </ol>\r\n      )\r\n      break\r\n\r\n    case null:\r\n      doggies = (\r\n        <ul>\r\n          {doggies.map((d) => (\r\n            <li>{d}</li>\r\n          ))}\r\n        </ul>\r\n      )\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>...</div>\r\n      <div className=\"Doggies\">\r\n        <h1>{headerTitle}</h1>\r\n        {doggies}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Doggies\r\n","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport Footer from './Footer'\nimport UpOrDown from './UpOrDown'\nimport Messenger from './Messenger'\nimport Doggies from './Doggies'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      doggiesOpts: {\n        order: 'asc', //possibilities: 'asc', 'desc', null\n        headerTitle: 'Rescue Doggies',\n        doggies: ['Emilka', 'Karas', 'Anzelm', 'Pimpek', 'Hipek', 'Pan Pyrka'],\n        // .filter((d) => d.length <= 5)\n        // .map((d) => 'Pies ' + d) // declarative (CO / WHAT)\n        // .sort()\n        // .reverse()\n      },\n    }\n    // this.soc_med = [\n    //   {\n    //     id: 1,\n    //     name: 'Twitter',\n    //     url: 'https://twitter.com',\n    //     img:\n    //       'https://www.luxurydaily.com/wp-content/uploads/2014/03/Twitter_logo_blue.jpg',\n    //   },\n    //   {\n    //     id: 2,\n    //     name: 'Twitter',\n    //     url: 'https://twitter.com',\n    //     img:\n    //       'https://www.luxurydaily.com/wp-content/uploads/2014/03/Twitter_logo_blue.jpg',\n    //   },\n    // ]\n    // this.years = '2018-2020'\n    // this.cbFn = (childData) => {\n    //   this.setState({ message: childData })\n    // }\n    this.changeDoggiesOrder = () => {\n      var doggiesOpts = { ...this.state.doggiesOpts }\n\n      switch (this.state.doggiesOpts.order) {\n        case 'asc':\n          doggiesOpts.order = 'desc'\n          break\n\n        case 'desc':\n          doggiesOpts.order = null\n          break\n\n        case null:\n          doggiesOpts.order = 'asc'\n          break\n\n        default:\n          break\n      }\n\n      this.setState({ doggiesOpts })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Doggies doggiesOpts={this.state.doggiesOpts} />\n        <button onClick={this.changeDoggiesOrder}>Change Doggies Order</button>\n        {/* <Messenger sendMsg={this.cbFn} />\n        <p>msg: {this.state.message}</p>\n        {this.state.people.map((name) => (\n          <p>Hello, {name}</p>\n        ))}\n        {this.state.data}\n\n        <Footer soc_med={this.soc_med} years={this.years} />\n        <UpOrDown isUp={true} />\n        <UpOrDown isUp={false} />\n        <UpOrDown isUp={true} />\n        <UpOrDown isUp={false} /> */}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}